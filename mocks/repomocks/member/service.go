// Code generated by mockery v2.40.1. DO NOT EDIT.

package repomocks

import (
	member "wallet/service/member"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: r
func (_m *UseCase) Create(r *member.CreateRequest) (*member.DTO, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *member.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(*member.CreateRequest) (*member.DTO, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*member.CreateRequest) *member.DTO); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*member.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(*member.CreateRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *UseCase) GetById(id int64) (*member.DTO, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *member.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*member.DTO, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *member.DTO); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*member.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByPhone provides a mock function with given fields: phone
func (_m *UseCase) GetByPhone(phone string) (*member.DTO, error) {
	ret := _m.Called(phone)

	if len(ret) == 0 {
		panic("no return value specified for GetByPhone")
	}

	var r0 *member.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*member.DTO, error)); ok {
		return rf(phone)
	}
	if rf, ok := ret.Get(0).(func(string) *member.DTO); ok {
		r0 = rf(phone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*member.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(phone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMembersByGiftCode provides a mock function with given fields: gift, limit, offset
func (_m *UseCase) GetMembersByGiftCode(gift string, limit int, offset int) ([]*member.DTO, error) {
	ret := _m.Called(gift, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetMembersByGiftCode")
	}

	var r0 []*member.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]*member.DTO, error)); ok {
		return rf(gift, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []*member.DTO); ok {
		r0 = rf(gift, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*member.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(gift, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: r
func (_m *UseCase) Update(r *member.DTO) (*member.DTO, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *member.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(*member.DTO) (*member.DTO, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*member.DTO) *member.DTO); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*member.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(*member.DTO) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithTX provides a mock function with given fields: tx
func (_m *UseCase) WithTX(tx *sql.Tx) (*member.Service, error) {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTX")
	}

	var r0 *member.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) (*member.Service, error)); ok {
		return rf(tx)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx) *member.Service); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*member.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
