// Code generated by mockery v2.40.1. DO NOT EDIT.

package repomocks

import (
	member "wallet/storage/member"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: u
func (_m *Repository) Create(u *member.Member) error {
	ret := _m.Called(u)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*member.Member) error); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllByPage provides a mock function with given fields: limit, offset, count
func (_m *Repository) GetAllByPage(limit int, offset int, count bool) ([]*member.Member, int, error) {
	ret := _m.Called(limit, offset, count)

	if len(ret) == 0 {
		panic("no return value specified for GetAllByPage")
	}

	var r0 []*member.Member
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, bool) ([]*member.Member, int, error)); ok {
		return rf(limit, offset, count)
	}
	if rf, ok := ret.Get(0).(func(int, int, bool) []*member.Member); ok {
		r0 = rf(limit, offset, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*member.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, bool) int); ok {
		r1 = rf(limit, offset, count)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int, bool) error); ok {
		r2 = rf(limit, offset, count)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetById provides a mock function with given fields: id
func (_m *Repository) GetById(id int64) (*member.Member, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *member.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*member.Member, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *member.Member); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*member.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByPhone provides a mock function with given fields: phone
func (_m *Repository) GetByPhone(phone string) (*member.Member, error) {
	ret := _m.Called(phone)

	if len(ret) == 0 {
		panic("no return value specified for GetByPhone")
	}

	var r0 *member.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*member.Member, error)); ok {
		return rf(phone)
	}
	if rf, ok := ret.Get(0).(func(string) *member.Member); ok {
		r0 = rf(phone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*member.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(phone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: u
func (_m *Repository) Update(u *member.Member) error {
	ret := _m.Called(u)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*member.Member) error); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithTX provides a mock function with given fields: tx
func (_m *Repository) WithTX(tx *sql.Tx) (member.Repository, error) {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTX")
	}

	var r0 member.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) (member.Repository, error)); ok {
		return rf(tx)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx) member.Repository); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(member.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
