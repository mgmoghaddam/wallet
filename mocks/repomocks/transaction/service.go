// Code generated by mockery v2.40.1. DO NOT EDIT.

package repomocks

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"

	transaction "wallet/service/transaction"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: r
func (_m *UseCase) Create(r *transaction.CreateRequest) (*transaction.DTO, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *transaction.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(*transaction.CreateRequest) (*transaction.DTO, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*transaction.CreateRequest) *transaction.DTO); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(*transaction.CreateRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *UseCase) Delete(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByWalletID provides a mock function with given fields: walletID
func (_m *UseCase) DeleteByWalletID(walletID int64) error {
	ret := _m.Called(walletID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByWalletID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(walletID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBalance provides a mock function with given fields: walletID
func (_m *UseCase) GetBalance(walletID int64) (int64, error) {
	ret := _m.Called(walletID)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (int64, error)); ok {
		return rf(walletID)
	}
	if rf, ok := ret.Get(0).(func(int64) int64); ok {
		r0 = rf(walletID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByDiscountCodeWithPagination provides a mock function with given fields: discountCode, limit, offset
func (_m *UseCase) GetByDiscountCodeWithPagination(discountCode string, limit int, offset int) ([]*transaction.DTO, error) {
	ret := _m.Called(discountCode, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetByDiscountCodeWithPagination")
	}

	var r0 []*transaction.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]*transaction.DTO, error)); ok {
		return rf(discountCode, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []*transaction.DTO); ok {
		r0 = rf(discountCode, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*transaction.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(discountCode, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *UseCase) GetByID(id int64) (*transaction.DTO, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *transaction.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*transaction.DTO, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *transaction.DTO); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByWalletID provides a mock function with given fields: walletID
func (_m *UseCase) GetByWalletID(walletID int64) ([]*transaction.DTO, error) {
	ret := _m.Called(walletID)

	if len(ret) == 0 {
		panic("no return value specified for GetByWalletID")
	}

	var r0 []*transaction.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]*transaction.DTO, error)); ok {
		return rf(walletID)
	}
	if rf, ok := ret.Get(0).(func(int64) []*transaction.DTO); ok {
		r0 = rf(walletID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*transaction.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByWalletIDAndDiscountCode provides a mock function with given fields: walletID, discountCode
func (_m *UseCase) GetByWalletIDAndDiscountCode(walletID int64, discountCode string) ([]*transaction.DTO, error) {
	ret := _m.Called(walletID, discountCode)

	if len(ret) == 0 {
		panic("no return value specified for GetByWalletIDAndDiscountCode")
	}

	var r0 []*transaction.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string) ([]*transaction.DTO, error)); ok {
		return rf(walletID, discountCode)
	}
	if rf, ok := ret.Get(0).(func(int64, string) []*transaction.DTO); ok {
		r0 = rf(walletID, discountCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*transaction.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(walletID, discountCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByWalletIDAndType provides a mock function with given fields: walletID, transactionType
func (_m *UseCase) GetByWalletIDAndType(walletID int64, transactionType transaction.Type) ([]*transaction.DTO, error) {
	ret := _m.Called(walletID, transactionType)

	if len(ret) == 0 {
		panic("no return value specified for GetByWalletIDAndType")
	}

	var r0 []*transaction.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, transaction.Type) ([]*transaction.DTO, error)); ok {
		return rf(walletID, transactionType)
	}
	if rf, ok := ret.Get(0).(func(int64, transaction.Type) []*transaction.DTO); ok {
		r0 = rf(walletID, transactionType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*transaction.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, transaction.Type) error); ok {
		r1 = rf(walletID, transactionType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByWalletIDAndTypeAndDiscountCode provides a mock function with given fields: walletID, transactionType, discountCode
func (_m *UseCase) GetByWalletIDAndTypeAndDiscountCode(walletID int64, transactionType transaction.Type, discountCode string) ([]*transaction.DTO, error) {
	ret := _m.Called(walletID, transactionType, discountCode)

	if len(ret) == 0 {
		panic("no return value specified for GetByWalletIDAndTypeAndDiscountCode")
	}

	var r0 []*transaction.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, transaction.Type, string) ([]*transaction.DTO, error)); ok {
		return rf(walletID, transactionType, discountCode)
	}
	if rf, ok := ret.Get(0).(func(int64, transaction.Type, string) []*transaction.DTO); ok {
		r0 = rf(walletID, transactionType, discountCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*transaction.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, transaction.Type, string) error); ok {
		r1 = rf(walletID, transactionType, discountCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByWalletIDWithPagination provides a mock function with given fields: walletID, limit, offset
func (_m *UseCase) GetByWalletIDWithPagination(walletID int64, limit int, offset int) ([]*transaction.DTO, error) {
	ret := _m.Called(walletID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetByWalletIDWithPagination")
	}

	var r0 []*transaction.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int, int) ([]*transaction.DTO, error)); ok {
		return rf(walletID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int64, int, int) []*transaction.DTO); ok {
		r0 = rf(walletID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*transaction.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int, int) error); ok {
		r1 = rf(walletID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithTX provides a mock function with given fields: tx
func (_m *UseCase) WithTX(tx *sql.Tx) (*transaction.Service, error) {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTX")
	}

	var r0 *transaction.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) (*transaction.Service, error)); ok {
		return rf(tx)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx) *transaction.Service); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
