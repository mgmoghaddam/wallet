// Code generated by mockery v2.40.1. DO NOT EDIT.

package repomocks

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"

	transaction "wallet/service/transaction"

	wallet "wallet/service/wallet"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// AddGift provides a mock function with given fields: r
func (_m *UseCase) AddGift(r *wallet.AddGiftRequest) (*wallet.DTO, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddGift")
	}

	var r0 *wallet.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(*wallet.AddGiftRequest) (*wallet.DTO, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*wallet.AddGiftRequest) *wallet.DTO); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wallet.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(*wallet.AddGiftRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: r
func (_m *UseCase) Create(r *wallet.CreateRequest) (*wallet.DTO, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *wallet.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(*wallet.CreateRequest) (*wallet.DTO, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*wallet.CreateRequest) *wallet.DTO); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wallet.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(*wallet.CreateRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransactionAndUpdateWallet provides a mock function with given fields: id, amount, transactionType, description, discountCode
func (_m *UseCase) CreateTransactionAndUpdateWallet(id int64, amount int64, transactionType transaction.Type, description string, discountCode string) (*wallet.DTO, error) {
	ret := _m.Called(id, amount, transactionType, description, discountCode)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransactionAndUpdateWallet")
	}

	var r0 *wallet.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64, transaction.Type, string, string) (*wallet.DTO, error)); ok {
		return rf(id, amount, transactionType, description, discountCode)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, transaction.Type, string, string) *wallet.DTO); ok {
		r0 = rf(id, amount, transactionType, description, discountCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wallet.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64, transaction.Type, string, string) error); ok {
		r1 = rf(id, amount, transactionType, description, discountCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *UseCase) Delete(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByMemberID provides a mock function with given fields: memberID
func (_m *UseCase) DeleteByMemberID(memberID int64) error {
	ret := _m.Called(memberID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByMemberID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(memberID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByDiscountCodeWithPagination provides a mock function with given fields: discountCode, limit, offset
func (_m *UseCase) GetByDiscountCodeWithPagination(discountCode string, limit int, offset int) ([]*wallet.DTO, error) {
	ret := _m.Called(discountCode, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetByDiscountCodeWithPagination")
	}

	var r0 []*wallet.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]*wallet.DTO, error)); ok {
		return rf(discountCode, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []*wallet.DTO); ok {
		r0 = rf(discountCode, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*wallet.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(discountCode, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *UseCase) GetByID(id int64) (*wallet.DTO, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *wallet.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*wallet.DTO, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *wallet.DTO); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wallet.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByMemberID provides a mock function with given fields: memberID
func (_m *UseCase) GetByMemberID(memberID int64) ([]*wallet.DTO, error) {
	ret := _m.Called(memberID)

	if len(ret) == 0 {
		panic("no return value specified for GetByMemberID")
	}

	var r0 []*wallet.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]*wallet.DTO, error)); ok {
		return rf(memberID)
	}
	if rf, ok := ret.Get(0).(func(int64) []*wallet.DTO); ok {
		r0 = rf(memberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*wallet.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(memberID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Recharge provides a mock function with given fields: id, amount
func (_m *UseCase) Recharge(id int64, amount int64) (*wallet.DTO, error) {
	ret := _m.Called(id, amount)

	if len(ret) == 0 {
		panic("no return value specified for Recharge")
	}

	var r0 *wallet.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*wallet.DTO, error)); ok {
		return rf(id, amount)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *wallet.DTO); ok {
		r0 = rf(id, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wallet.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(id, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Refund provides a mock function with given fields: id
func (_m *UseCase) Refund(id int64) (*wallet.DTO, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Refund")
	}

	var r0 *wallet.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*wallet.DTO, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *wallet.DTO); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wallet.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transfer provides a mock function with given fields: fromID, toID, amount
func (_m *UseCase) Transfer(fromID int64, toID int64, amount int64) (*wallet.DTO, error) {
	ret := _m.Called(fromID, toID, amount)

	if len(ret) == 0 {
		panic("no return value specified for Transfer")
	}

	var r0 *wallet.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64, int64) (*wallet.DTO, error)); ok {
		return rf(fromID, toID, amount)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, int64) *wallet.DTO); ok {
		r0 = rf(fromID, toID, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wallet.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64, int64) error); ok {
		r1 = rf(fromID, toID, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithTX provides a mock function with given fields: tx
func (_m *UseCase) WithTX(tx *sql.Tx) (*wallet.Service, error) {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTX")
	}

	var r0 *wallet.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) (*wallet.Service, error)); ok {
		return rf(tx)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx) *wallet.Service); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wallet.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Withdraw provides a mock function with given fields: id, amount
func (_m *UseCase) Withdraw(id int64, amount int64) (*wallet.DTO, error) {
	ret := _m.Called(id, amount)

	if len(ret) == 0 {
		panic("no return value specified for Withdraw")
	}

	var r0 *wallet.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*wallet.DTO, error)); ok {
		return rf(id, amount)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *wallet.DTO); ok {
		r0 = rf(id, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wallet.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(id, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
